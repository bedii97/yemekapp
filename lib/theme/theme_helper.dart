import 'dart:ui';
import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:yemek_app/core/utils/size_utils.dart';

String _appTheme = "primary";

/// Helper class for managing themes and colors.
class ThemeHelper {
  // A map of custom color themes supported by the app
  final Map<String, PrimaryColors> _supportedCustomColor = {
    'primary': PrimaryColors()
  };

// A map of color schemes supported by the app
  final Map<String, ColorScheme> _supportedColorScheme = {
    'primary': ColorSchemes.primaryColorScheme
  };

  /// Changes the app theme to [newTheme].
  void changeTheme(String newTheme) {
    _appTheme = newTheme;
  }

  /// Returns the primary colors for the current theme.
  PrimaryColors _getThemeColors() {
    //throw exception to notify given theme is not found or not generated by the generator
    if (!_supportedCustomColor.containsKey(_appTheme)) {
      throw Exception(
          "$_appTheme is not found.Make sure you have added this theme class in JSON Try running flutter pub run build_runner");
    }
    //return theme from map

    return _supportedCustomColor[_appTheme] ?? PrimaryColors();
  }

  /// Returns the current theme data.
  ThemeData _getThemeData() {
    //throw exception to notify given theme is not found or not generated by the generator
    if (!_supportedColorScheme.containsKey(_appTheme)) {
      throw Exception(
          "$_appTheme is not found.Make sure you have added this theme class in JSON Try running flutter pub run build_runner");
    }
    //return theme from map

    var colorScheme =
        _supportedColorScheme[_appTheme] ?? ColorSchemes.primaryColorScheme;
    return ThemeData.light().copyWith(
      appBarTheme: const AppBarTheme(
        systemOverlayStyle: SystemUiOverlayStyle(
          statusBarColor: Colors.yellow,
        ),
      ),
      visualDensity: VisualDensity.standard,
      colorScheme: colorScheme,
      textTheme: TextThemes.textTheme(colorScheme),
      scaffoldBackgroundColor: colorScheme.onPrimary.withOpacity(1),
      elevatedButtonTheme: ElevatedButtonThemeData(
        style: ElevatedButton.styleFrom(
          disabledBackgroundColor: appTheme.whiteA700,
          backgroundColor: colorScheme.primary,
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(14.h),
          ),
          visualDensity: const VisualDensity(
            vertical: -4,
            horizontal: -4,
          ),
          padding: EdgeInsets.zero,
        ),
      ),
      dividerTheme: DividerThemeData(
        thickness: 1,
        space: 1,
        color: colorScheme.primary,
      ),
    );
  }

  /// Returns the primary colors for the current theme.
  PrimaryColors themeColor() => _getThemeColors();

  /// Returns the current theme data.
  ThemeData themeData() => _getThemeData();
}

/// Class containing the supported text theme styles.
class TextThemes {
  static TextTheme textTheme(ColorScheme colorScheme) => TextTheme(
        bodyLarge: TextStyle(
          color: appTheme.whiteA700,
          fontSize: 16.fSize,
          fontFamily: 'Inter',
          fontWeight: FontWeight.w400,
        ),
        bodyMedium: TextStyle(
          color: colorScheme.onPrimary.withOpacity(1),
          fontSize: 14.fSize,
          fontFamily: 'SF Pro Display',
          fontWeight: FontWeight.w400,
        ),
        bodySmall: TextStyle(
          color: appTheme.green900,
          fontSize: 12.fSize,
          fontFamily: 'SF Pro Display',
          fontWeight: FontWeight.w400,
        ),
        displaySmall: TextStyle(
          color: colorScheme.onErrorContainer.withOpacity(1),
          fontSize: 36.fSize,
          fontFamily: 'SF Pro Display',
          fontWeight: FontWeight.w500,
        ),
        headlineLarge: TextStyle(
          color: appTheme.whiteA700,
          fontSize: 30.fSize,
          fontFamily: 'Inter',
          fontWeight: FontWeight.w700,
        ),
        labelLarge: TextStyle(
          color: colorScheme.onErrorContainer.withOpacity(1),
          fontSize: 12.fSize,
          fontFamily: 'SF Pro Display',
          fontWeight: FontWeight.w500,
        ),
        titleLarge: TextStyle(
          color: colorScheme.onErrorContainer.withOpacity(1),
          fontSize: 20.fSize,
          fontFamily: 'SF Pro Display',
          fontWeight: FontWeight.w500,
        ),
        titleMedium: TextStyle(
          color: colorScheme.onErrorContainer.withOpacity(1),
          fontSize: 18.fSize,
          fontFamily: 'SF Pro Display',
          fontWeight: FontWeight.w500,
        ),
        titleSmall: TextStyle(
          color: appTheme.gray400,
          fontSize: 14.fSize,
          fontFamily: 'Inter',
          fontWeight: FontWeight.w500,
        ),
      );
}

/// Class containing the supported color schemes.
class ColorSchemes {
  static const primaryColorScheme = ColorScheme.light(
    // Primary colors
    primary: Color(0XFF133C41),
    primaryContainer: Color(0XFFFFA800),
    secondary: Color(0XFFFFA800),
    secondaryContainer: Color(0XFF263238),
    tertiary: Color(0XFFFFA800),
    tertiaryContainer: Color(0XFF263238),

    // Background colors
    background: Color(0XFFFFA800),

    // Surface colors
    surface: Color(0XFFFFA800),
    surfaceTint: Color(0X1EFFFFFF),
    surfaceVariant: Color(0XFF263238),

    // Error colors
    error: Color(0X1EFFFFFF),
    errorContainer: Color(0XFFE02F2F),
    onError: Color(0XFF263238),
    onErrorContainer: Color(0X7F111111),

    // On colors(text colors)
    onBackground: Color(0XFF292D32),
    onInverseSurface: Color(0XFF263238),
    onPrimary: Color(0X1EFFFFFF),
    onPrimaryContainer: Color(0XFF292D32),
    onSecondary: Color(0XFF292D32),
    onSecondaryContainer: Color(0X1EFFFFFF),
    onTertiary: Color(0XFF292D32),
    onTertiaryContainer: Color(0X1EFFFFFF),

    // Other colors
    outline: Color(0X1EFFFFFF),
    outlineVariant: Color(0XFFFFA800),
    scrim: Color(0XFFFFA800),
    shadow: Color(0X1EFFFFFF),

    // Inverse colors
    inversePrimary: Color(0XFFFFA800),
    inverseSurface: Color(0X1EFFFFFF),

    // Pending colors
    onSurface: Color(0XFF292D32),
    onSurfaceVariant: Color(0X1EFFFFFF),
  );
}

/// Class containing custom colors for a primary theme.
class PrimaryColors {
  // Amber
  Color get amber300 => const Color(0XFFFFC75A);
  Color get amber700 => const Color(0XFFEC9E07);
  Color get amber70001 => const Color(0XFFEC9E08);
  Color get amberA700 => const Color(0XFFECAC08);

  // Black
  Color get black900 => const Color(0XFF000000);

  // BlueGray
  Color get blueGray100 => const Color(0XFFD9D9D9);
  Color get blueGray10001 => const Color(0XFFCECECE);
  Color get blueGray400 => const Color(0XFF8A8A8E);
  Color get blueGray40001 => const Color(0XFF888888);
  Color get blueGray800 => const Color(0XFF37474F);

  // BlueGrayCc
  Color get blueGray900Cc => const Color(0XCC2D2D2D);

  // Gray
  Color get gray100 => const Color(0XFFF5F5F5);
  Color get gray200 => const Color(0XFFECECEC);
  Color get gray300 => const Color(0XFFE0E3E3);
  Color get gray30001 => const Color(0XFFDBDBDB);
  Color get gray400 => const Color(0XFFC2B9B9);
  Color get gray50 => const Color(0XFFF8F8F8);
  Color get gray500 => const Color(0XFFA3A3A3);
  Color get gray50001 => const Color(0XFF9C9C9C);
  Color get gray600 => const Color(0XFF757575);
  Color get gray800 => const Color(0XFF55311B);
  Color get gray80014 => const Color(0X14424242);
  Color get gray80019 => const Color(0X19383838);

  // Green
  Color get green900 => const Color(0XFF008905);
  Color get greenA100 => const Color(0XFFCBFFCE);

  // LightBlue
  Color get lightBlue900 => const Color(0XFF07689F);

  // Red
  Color get red300 => const Color(0XFFFF7272);

  // White
  Color get whiteA700 => const Color(0XFFFFFCFC);

  // Yellow
  Color get yellow100 => const Color(0XFFFDEDCD);
}

PrimaryColors get appTheme => ThemeHelper().themeColor();
ThemeData get theme => ThemeHelper().themeData();
